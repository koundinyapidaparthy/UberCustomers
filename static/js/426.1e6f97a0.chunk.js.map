{"version":3,"file":"static/js/426.1e6f97a0.chunk.js","mappings":"uPA2IA,UA3HkB,WACZ,IAAMA,GAAWC,EAAAA,EAAAA,MAEXC,EADYC,EAAAA,WAAiBC,EAAAA,GACRC,YAAYC,SAEjCC,EAAO,CAEX,CAAEC,MAAO,SAAUC,KAAM,KACzB,CAAED,MAAO,WAAYC,KAAM,MAC3B,CAAED,MAAO,kCAAmCC,KAAM,OAa9CC,GAXOC,EAAAA,EAAAA,IAAW,iBAAK,CAC3BC,KAAK,CAAC,EAGNC,UAAU,CACRC,MAAM,OACNC,QAAQ,OACRC,WAAW,SACXC,eAAe,gBARK,GAWVC,GACd,EAA2Cf,EAAAA,SAAe,CACxDgB,SAAS,KACTC,UAAU,KACVC,SAAQ,EACRC,iBAAiB,OAJnB,eAAOC,EAAP,KAAuBC,EAAvB,KAYA,SAASC,EAAaC,GACpBF,GAAmB,SAACG,GAAD,eAAC,UACfA,GADc,IAEjBN,SAAQ,EACRO,oBAAmB,EACnBT,SAASO,EAASG,OAAOV,SACzBC,UAAUM,EAASG,OAAOT,WALT,GAOpB,CAEH,SAASU,EAAUC,GAEjB,OAAOA,EAAMC,MACX,KAAKD,EAAME,kBACTC,EAAwB,GACxB,MACF,KAAKH,EAAMI,qBACTD,EAAwB,GACxB,MACF,KAAKH,EAAMK,QACTF,EAAwB,GACxB,MACF,KAAKH,EAAMM,cAGX,QACEH,EAAwB,GAE7B,CAeC,SAASA,EAAwBI,GAC/Bd,GAAmB,SAACG,GAAD,eAAC,UACfA,GADc,IAEjBL,iBAAiBgB,GAFA,GAIpB,CAMD,SAASC,EAAgBC,GACvB,MAAmBA,EAAMC,OAAzB,EAAOC,KAAP,EAAYC,KAOb,CACL,OArEIC,QAAQC,IAAI,CAACtB,gBAAAA,IAEbpB,EAAAA,WAAgB,WAmCV2C,UAAUC,YACZD,UAAUC,YAAYC,mBAAmBvB,EAAaK,GAEtDI,EAAwB,EAnC3B,GAAC,IAuCF/B,EAAAA,WAAgB,WACXD,GACDF,EAAS,UAEZ,GAAC,KAsBJ,0BACE,iBAAKiD,UAAWvC,EAAQG,UAAxB,WACI,SAAC,IAAD,CACEqC,GAAG,iBACHC,QAAS5C,EACT6C,eAAgB,SAACC,GAAD,OAAYA,EAAO7C,KAAnB,EAChB8C,MAAO,CAAExC,MAAO,KAChByC,YAAa,SAACC,GAAD,OAAY,SAAC,KAAD,kBAAeA,GAAf,IAAuBC,MAAM,UAAUf,KAAK,SAASgB,SAAUnB,IAA3E,KAEf,yCACA,SAAC,IAAD,CACEW,GAAG,iBACHC,QAAS5C,EACT6C,eAAgB,SAACC,GAAD,OAAYA,EAAO7C,KAAnB,EAChB8C,MAAO,CAAExC,MAAO,KAChByC,YAAa,SAACC,GAAD,OAAY,SAAC,KAAD,kBAAeA,GAAf,IAAuBC,MAAM,OAAMf,KAAK,OAAOgB,SAAUnB,IAArE,KAGf,SAAC,IAAD,wBAIT,C","sources":["ApplyRide/ApplyRide.js"],"sourcesContent":["import React from 'react'\r\nimport Autocomplete from '@mui/material/Autocomplete'\r\nimport TextField from '@mui/material/TextField'\r\nimport Button from '@mui/material/Button'\r\nimport { makeStyles } from '@mui/styles'\r\nimport {AppLevelContext} from \"../Context/CreateContext\"\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\n// const permissionStatus={\r\n//   1: \"Geolocation is not supported by this browser.\",\r\n//   2:\"User denied the request for Geolocation.\",\r\n//   3:\"Location information is unavailable.\",\r\n//   4:\"The request to get user location timed out.\",\r\n//   5:\"An unknown error occurred.\"\r\n// }\r\n\r\nconst ApplyRide = () => {\r\n      const navigate = useNavigate();\r\n      const contextData=React.useContext(AppLevelContext);\r\n      const UserName=contextData.userDetails.loggedIn;\r\n\r\n      const Data = [\r\n       \r\n        { title: 'Snatch', year: 2000 },\r\n        { title: '3 Idiots', year: 2009 },\r\n        { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n      ];\r\n      const styles=makeStyles(()=>({\r\n        main:{\r\n\r\n        },\r\n        container:{\r\n          width:\"100%\",\r\n          display:\"flex\",\r\n          alignItems:\"center\",\r\n          justifyContent:\"space-around\"\r\n        }\r\n      }));\r\n      const classes=styles();\r\n      const [currentLocation,setCurrentLocation]=React.useState({\r\n        latitude:null,\r\n        longitude:null,\r\n        loading:true,\r\n        permissionStatus:null,\r\n      })\r\n      console.log({currentLocation})\r\n\r\n      React.useEffect(()=>{\r\n       \r\n        getLocation()\r\n      },[]);\r\n      function showPosition(position) {\r\n        setCurrentLocation((prev)=> ({\r\n          ...prev,\r\n          loading:false,\r\n          geoLocationSupport:true,\r\n          latitude:position.coords.latitude,\r\n          longitude:position.coords.longitude\r\n        }))\r\n      }\r\n      \r\n    function showError(error) {\r\n      \r\n      switch(error.code) {\r\n        case error.PERMISSION_DENIED:\r\n          callBackForCurrentState(2)\r\n          break;\r\n        case error.POSITION_UNAVAILABLE:\r\n          callBackForCurrentState(3)\r\n          break;\r\n        case error.TIMEOUT:\r\n          callBackForCurrentState(4)\r\n          break;\r\n        case error.UNKNOWN_ERROR:\r\n          callBackForCurrentState(5)\r\n          break;\r\n        default:\r\n          callBackForCurrentState(5)\r\n      }\r\n    }\r\n\r\n      function getLocation() {\r\n        if (navigator.geolocation) {\r\n          navigator.geolocation.getCurrentPosition(showPosition,showError);\r\n        } else {\r\n          callBackForCurrentState(0)\r\n          \r\n        }\r\n      }\r\n      React.useEffect(()=>{\r\n        if(UserName){\r\n          navigate(\"/letsgo\") \r\n        }\r\n      },[])\r\n      function callBackForCurrentState(val){\r\n        setCurrentLocation((prev)=> ({\r\n          ...prev,\r\n          permissionStatus:val\r\n        }))\r\n      }\r\n\r\n      \r\n\r\n\r\n\r\n      function textFieldChange(event){\r\n        const {name,value}=event.target;\r\n        if(name===\"pickup\"){\r\n          // Query call for this\r\n        }\r\n        else{\r\n          // Query call for this\r\n        }\r\n      }\r\n  return (\r\n    <div>\r\n      <div className={classes.container}>\r\n          <Autocomplete \r\n            id=\"combo-box-demo\"\r\n            options={Data}\r\n            getOptionLabel={(option) => option.title}\r\n            style={{ width: 300 }}\r\n            renderInput={(params) => <TextField {...params} label=\"Pick Up\" name=\"pickup\" onChange={textFieldChange} />}\r\n          /> \r\n          <div>--- to ---</div>\r\n          <Autocomplete \r\n            id=\"combo-box-demo\"\r\n            options={Data}\r\n            getOptionLabel={(option) => option.title}\r\n            style={{ width: 300 }}\r\n            renderInput={(params) => <TextField {...params} label=\"Drop\"name=\"drop\" onChange={textFieldChange} />}\r\n          /> \r\n\r\n          <Button> Ride</Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ApplyRide"],"names":["navigate","useNavigate","UserName","React","AppLevelContext","userDetails","loggedIn","Data","title","year","classes","makeStyles","main","container","width","display","alignItems","justifyContent","styles","latitude","longitude","loading","permissionStatus","currentLocation","setCurrentLocation","showPosition","position","prev","geoLocationSupport","coords","showError","error","code","PERMISSION_DENIED","callBackForCurrentState","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERROR","val","textFieldChange","event","target","name","value","console","log","navigator","geolocation","getCurrentPosition","className","id","options","getOptionLabel","option","style","renderInput","params","label","onChange"],"sourceRoot":""}